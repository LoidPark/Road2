1. 데이터 가져오기
    - housing_path=os.paht.join("datasets", "housing")
    - os.path.isdir(housing_path)
    - os.makedirs(housing_path)
    - housing_tgz = tarfile.open(tgz_path)
    - housing_tgz.extractall(path=housing_path)
    - pd.read_csv(csv_path)
2. 데이터 확인
    - housing.head()
    - housing.info()
    - housing["ocean_proximity"].value_counts()
    - housing.describe()
    - housing.hist(bins=50, figsize=(20,15))
3. 학습/테스트 셋 분할
    - from sklearn.model_selection import train_test_split
      train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)
      np.random.seed(42) ???

    - housing["median_income"].hist()
    - housing["incom_cat"] = pd.cut(housing["median_income"], bins=[0., 1.5, 3.0, 4.5, 6., np.inf], labels=[1,2,3,4,5])
    - housing["income_cat"].hist()
---
    - from sklearn.model_selection import StratifiedShuffleSplit
      split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
      for train_index, test_index in split.split(housing, housing["incom_cat"]):
          strat_train_set = housing.loc[train_index]
          strat_test_set = housing.loc[test_index]
    - strat_test_set["income_cat"].value_counts() / len(strat_test_set)
    - housing["income_cat"].value_counts() / len(housing)
---
    - st_train_set, st_test_set = train_test_split(housing, test_size=0.2, random_state=42, stratify=housing["income_cat"])
    - st_train_set["income_cat"].value_counts() / len(st_train_set)

4. 탐색과 시각화
    - housing = strat_train_set.copy()

    - housing.plot(kind="scatter", x="longitude", y="latitude")
    - housing.plot.scatter(x="longitude", y="latitude")
    - plt.scatter(housing["longitude"], housing["latitude"])

    - housing.plot(kind="scatter", x="longitude", y="latitude", alpha=0.1)
    - housing.plot(kind="scatter", x="longitude", y="latitude", alpha=0.4,
            s=housing["population"]/100, label="Population", figsize=(10,7),
            c="median_house_value", cmap=plt.get_cmap("jet"), colorbar=True,
            sharex=False)

    - corr_matrix = housing.corr()
    - corr_matrix["median_house_value"].sort_values(ascending=False)

    - from pandas.plotting import scatter_matrix
      attributes = ["median_house_value", "median_income", "total_rooms", "housing_median_age"]
      scatter_matrix(housing[attributes], figsize=(12, 8))

    - housing["rooms_per_household"] = housing["total_rooms"]/housing["households"]
      housing["bedrooms_per_room"] = housing["total_bedrooms"]/housing["total_rooms"]
      housing["population_per_household"] = housing["population"]/housing["households"]

5. 데이터 준비
    - housing = strat_train_set.drop("median_house_value", axis=1)
    - housing_labels = strat_train_set["median_house_value"].copy()
---
    - sample_incomplete_rows = housing[housing.isnull().any(axis=1)].head()
    - sample_incomplete_rows.dropna(subset=["total_bedrooms"])
    - median = housing["total_bedrooms"].median()
      sample_incomplete_rows["total_bedrooms"].fillna(median, inplace=True)
---
    - from sklearn.impute import SimpleImputer
      imputer = SimpleImputer(strategy="median")
    - housing_num = housing.drop("ocean_proximity", axis=1)
    - housing_num = housing.select_dtypes(include=[np.number])
    - imputer.fit(housing_num)
    - imputer.statistics_
    - housing_num.median().values
    - X = imputer.transform(housing_num)
    - housing_tr = pd.DataFrame(X, columns=housing_num.columns, index=housing_num.index)
    - housing_tr.loc[sample_incomplete_rows.index.values]
    - imputer.strategy

    - housing_cat = housing[["ocean_proximity"]]
      from sklearn.preprocessing import OneHotEncoder
      cat_encoder = OneHotEncoder(sparse=False)
      housing_cat_1hot = cat_encoder.fit_transform(housing_cat)
      cat_encoder.categories_

    - class CombinedAttributesAdder(BaseEstimator, TransformerMixin):

    - from sklearn.pipeline import Pipeline
      from sklearn.preprocessing import StandardScaler
      num_pipeline = Pipeline([
             ('imputer', SimpleImputer(strategy="median")),
             ('attribs_adder', CombinedAttributesAdder()),
             ('std_scaler', StandardScaler()),
      ])
      housing_num_tr = num_pipeline.fit_transform(housing_num)

    - from sklearn.compose import ColumnTransformer
      num_attribs = list(housing_num)
      cat_attribs = ["ocean_proximity"]
      full_pipeline = ColumnTransformer([
          ("num", num_pipeline, num_attribs),
          ("cat", OneHotEncoder(), cat_attribs),
      ])
      housing_prepared = full_pipeline.fit_transform(housing)

6. 모델 선택 및 훈련
    - from sklearn.linear_model import LinearRegression
      lin_reg = LinearRegression()
      lin_reg.fit(housing_prepared, housing_labels)
---
    - some_data = housing.iloc[:5]
      some_labels = housing_labels.iloc[:5]
      some_data_prepared = full_pipeline.transform(some_data)
      print("예측:", lin_reg.predict(some_data_prepared))
      print("레이블:", list(some_labels))
---
    - from sklearn.metrics import mean_squared_error
      housing_predictions = lin_reg.predict(housing_prepared)
      lin_mse = mean_squared_error(housing_labels, housing_predictions)
      lin_rmse = np.sqrt(lin_mse)
    - from sklearn.metrics import mean_absolute_error
      lin_mae = mean_absolute_error(housing_labels, housing_predictions)
    - from sklearn.tree import DecisionTreeRegressor
      tree_reg = DecisionTreeRegressor(random_state=42)
      tree_reg.fit(housing_prepared, housing_labels)
      housing_predictions = tree_reg.predict(housing_prepared)
      tree_mse = mean_squared_error(housing_labels, housing_predictions)
      tree_rmse = np.sqrt(tree_mse)